/*
 *  Copyright (c) 2021 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'jacoco'

//noinspection UnnecessaryQualifiedReference
apply plugin: local.LibsPlugin

archivesBaseName = buildArtifactBaseName(project)

java.toolchain.languageVersion = JavaLanguageVersion.of(upperJava.version)
tasks.withType(JavaCompile) {
    compileJava.options.release.set baseJava.version
}

ext.slf4jVersion = '1.7.26'

libs {
    slf4j 'org.slf4j:slf4j-api:1.7.33'
    log4j {
        group 'org.apache.logging.log4j' version '2.17.1'
        lib 'log4j-slf4j-impl'
        lib 'log4j-jul'
    }
    jul(slf4j) {
        lib 'slf4j-jdk14'
    }
    vavr 'io.vavr:vavr:0.10.4'
    immutables {
        group 'org.immutables' version '2.9.0' //'2.8.8'
        lib 'value-annotations'
        lib 'encode'
        lib 'org.immutables.vavr:vavr-encodings:0.6.2', {
            exclude module: 'vavr'; exclude group: 'org.immutables'
        }
    }
    immutablesProc {
        extendsFrom immutables
        lib 'value-processor'
    }
    nullity 'com.google.code.findbugs:jsr305:3.0.2'
    tsconfig 'com.typesafe:config:1.4.1'
}

configurations {
    // TODO (2019-12-10) workaround, remove when https://youtrack.jetbrains.com/issue/IDEA-228522 is fixed
    //annotationProcessor.extendsFrom compile, compileOnly

    testCompileOnly.extendsFrom compileOnly
    testRuntimeOnly.extendsFrom runtimeOnly
    spockReports
}

dependencies {
    compileOnly libs.nullity

    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'

    testRuntimeOnly libs.log4j
    testRuntimeOnly project(':shared-rt:log4j-config')

    spockReports group: 'com.athaydes', name: 'spock-reports', version: '2.0-groovy-3.0', {
        exclude module: 'groovy'
        exclude module: 'spock-core'
    }
}

//noinspection GroovyAssignabilityCheck
task sourcesJar(type: Jar) {
    //noinspection GroovyAssignabilityCheck
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

javadoc {
    title = "$archivesBaseName $version API"
    options.addBooleanOption 'Xdoclint:-missing', true
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    archiveClassifier.set 'javadoc'
    from javadoc.destinationDir
}

afterEvaluate {
    tasks.withType(Jar) {Jar t ->
        //noinspection UnnecessaryQualifiedReference
        def git = new local.GitInvoker(project)
        manifest.attributes([
            'X-Artifact-Group'     : project.group,
            'X-Artifact-Name'      : t.archiveBaseName.get(),
            'X-Artifact-Version'   : t.archiveVersion.get(),
            'X-Artifact-Classifier': t.archiveClassifier.get(),
            'X-VCS-Type'           : 'git',
            'X-VCS-Commit'         : git.commitHash(),
            'X-VCS-Clean'          : git.clean() as String].with {removeAll {!it.value}; it})
    }
}

ext.publishToMaven = true

afterEvaluate {
    if (ext.publishToMaven) {
        apply from: rootProject.file('maven.gradle')
    }
}

compileJava {
    options.compilerArgs += '-Xlint:all'
    options.compilerArgs +=
        ['-processing', '-serial', '-classfile'].collect {'-Xlint:' + it}
    def werror = project.properties['ch.raffael.meldioc.Werror'] == 'true'
    if (project.path.startsWith(':usecases')) {
        werror = false
    }
    if (werror) {
        options.compilerArgs += '-Werror'
    }
}

afterEvaluate {
    tasks.withType(Test).each { t ->
        t.useJUnitPlatform()
        def sourceRoots = (sourceSets.test.groovy.srcDirs + sourceSets.main.groovy.srcDirs).join(File.pathSeparator)
        t.jvmArgs += [
            //'--illegal-access=debug',
            "-Dcom.athaydes.spockframework.report.showCodeBlocks='false'",
            "-Dcom.athaydes.spockframework.report.testSourceRoots=$sourceRoots",
            "-Dcom.athaydes.spockframework.report.outputDir=$rootReportsDir${File.separator}spock-reports"]
        t.classpath = files(t.classpath, configurations.spockReports)
    }
}
jacoco {
    toolVersion = jacocoVersion
}
task registerJacoco() {
    doFirst {
        rootProject.tasks.jacocoReport.with {
            executionData.from fileTree("$buildDir/jacoco", {include '**/*.exec'}).files
            classDirectories.from sourceSets.main.output.classesDirs
            sourceDirectories.from sourceSets.main.java.sourceDirectories
        }
    }
}
afterEvaluate {
    test.finalizedBy registerJacoco
    registerJacoco.finalizedBy rootProject.jacocoReport
}

ext.enableMeld = {
    dependencies {
        compileOnly project(':annotations')
        annotationProcessor project(':tools:processor')
        testAnnotationProcessor project(':tools:processor')
    }
}
ext.enableImmutables = {
    dependencies {
        compileOnly libs.immutables
        annotationProcessor project(':util:immutables-proc')
    }
}

afterEvaluate {
    idea.module {
        // add these, otherwise, IDEA won't see these classes and report errors where there are none
        sourceDirs += [compileGroovy.options.generatedSourceOutputDirectory.asFile.get()]
        testSourceDirs += [compileTestGroovy.options.generatedSourceOutputDirectory.asFile.get()]
    }
}
