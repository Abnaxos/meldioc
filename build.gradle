/*
 *  Copyright (c) 2021 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.9.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0'
        classpath 'org.gradlex:extra-java-module-info:1.1'
    }
}

gradle.projectsEvaluated {
    logger.quiet "+- Versions:"
    def pad = it.rootProject.allprojects.collect {it.path.length() as int}.max()
    allprojects.forEach({logger.quiet "|  ${(it.path.substring(1) ?: '<root>').padRight(pad - 1)} $it.version"})
    logger.quiet '+---'
}
gradle.buildFinished {
    logger.quiet "BUILD FINISHED on ${new Date()}"
}

apply plugin: 'com.github.ben-manes.versions'

buildDir = file('target')

if (rootProject.properties['localPublishing'] == 'true') {
    ext.localMvn = file("$buildDir/mvn")
} else {
    ext.localMvn = null
}

ext.jacocoVersion = '0.8.8'

allprojects {
    ext.rootReportsDir = file("$rootProject.buildDir/reports")

    apply plugin: 'idea'
    //noinspection UnnecessaryQualifiedReference
    apply plugin: local.VersioningPlugin
    //println "VERSION $project: $project.version"

    buildDir = 'target'
    group = 'ch.raffael.meldioc'

    ext.baseJava = [version: 11]
    ext.upperJava = [version: 19, preview: true]

    repositories { mavenCentral() }

    configurations {
        // the mvnExport configuration is used to mark dependencies that should
        // be in 'implementation', but actually are 'api' in order to be
        // exported to Maven correctly
        mvnExport
        api.extendsFrom mvnExport
    }

    if (file('src/main/java').isDirectory()) {
        apply from: "$rootProject.projectDir/java.gradle"
    }

    idea.module {
        name = buildArtifactBaseName(project)
        sourceDirs += file('out/production/classes/generated')
        testSourceDirs += file('out/test/classes/generated_tests')
    }
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = jacocoVersion
}
task jacocoReport(type: JacocoReport) {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
        html.destination = file("$rootReportsDir/jacoco-html")
    }
}

task allArtifacts(type: Copy) {
    mustRunAfter jacocoReport
    afterEvaluate {
        mustRunAfter allprojects.findAll {it.tasks.findByName('build') != null}.collect {it.tasks.getByName('build')}
    }

    destinationDir file("$buildDir/all-artifacts")

    into('jars') {
        def d = delegate
        allprojects
            .findAll {it.plugins.hasPlugin('java') && it.ext.publishToMaven == true}
            .each {d.from("$it.buildDir/libs") {include '*.jar'}}
    }
    into('reports') {
        from rootReportsDir
    }
    def idea = findProject(':tools:idea')
    if (idea) {
        into('idea-plugin') {
            from idea.file("$idea.buildDir/distributions")
        }
    }

    doLast {
        def files = { html, dir, cond ->
            def list = []
            fileTree("$destinationDir/$dir").visit {f ->
                if (cond(f)) {
                    list.add f
                }
            }
            list = list.sort()
            html.ul {
                list.each {f ->
                    li {
                        //noinspection GroovyAssignabilityCheck
                        a(href: "$dir/${f.relativePath.segments.join('/')}", f.relativePath.segments[0])
                    }
                }
            }
        }
        file("$destinationDir/index.html").withPrintWriter {out ->
            //noinspection UnnecessaryQualifiedReference
            new groovy.xml.MarkupBuilder(out).html {
                //noinspection GroovyAssignabilityCheck
                head {
                    title "Artifacts"
                }
                body {
                    h1 "Artifacts"

                    h2 'Reports'
                    files(delegate, 'reports', {it.relativePath.segments.length == 2 && it.name == 'index.html'})

                    h2 'IDEA Plugin'
                    files(delegate, 'idea-plugin', {true})

                    h2 'Jars'
                    files(delegate, 'jars', {true})
                }
            }
        }
    }
}

task allTestResults(type: Copy) {
    def selfTask = delegate
    destinationDir file("$buildDir/all-test-results")
    exclude 'test/binary'
    afterEvaluate {
        allprojects
            .findAll {it.tasks.findByName('test') != null}
            .each { p ->
                p.tasks.test.finalizedBy selfTask
                from p.file("$p.buildDir/test-results")
            }
    }
}

//noinspection UnnecessaryQualifiedReference
task branchReleaseCandidate(type: local.BranchReleaseCandidateTask) {}

task includeGradleFile {
    outputs.upToDateWhen {false}
    doFirst {
        mkdir project.buildDir
        file("$buildDir/include.gradle").withPrintWriter {out ->
            out.println "includeBuild('${(project.rootDir as String).replace('\\', '\\\\')}') {"
            out.println "  dependencySubstitution {"
            allprojects.findAll {it.plugins.hasPlugin('maven-publish')}.each {p ->
                p.publishing.publications.findByName('mavenJava').each {pub ->
                    out.println "    substitute module('$pub.groupId:$pub.artifactId') using project('$p.path')"
                }
            }
            out.println "  }"
            out.println "}"
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.allTasks.any {it instanceof Sign && it.onlyIf.isSatisfiedBy(it)}) {
        def pwd = loadEncryptedPassword(
            "signing key passphrase", rootProject.properties.'ch.raffael.meldioc.sign.passphrase.command')
        allprojects {
            if (tasks.withType(Sign)) {
                logger.quiet "Setting signing key for $project.path"
                ext.'signing.gnupg.keyName' = properties.'ch.raffael.meldioc.sign.keyName'
                ext.'signing.gnupg.passphrase' = pwd
            }
        }
    }
}

String loadEncryptedPassword(String description, cmdExpr) {
    def pwdStream = new ByteArrayOutputStream()
    def cmdLine = evaluate(cmdExpr as String) as List
    logger.quiet "Retrieving $description using command: $cmdLine"
    exec {
        commandLine cmdLine
        standardOutput pwdStream
    }
     new String(pwdStream.toByteArray())
}

dependencyUpdates {
    //noinspection GroovyAssignabilityCheck
    rejectVersionIf {
        def v = it.candidate.version.toUpperCase()
        if (v.contains('FINAL') || v.contains('RELEASE') || v.contains('GA')) {
            return false
        }
        if (v.contains('BETA') || v.contains('ALPHA')) {
            return true
        }
        return false
    }
    gradleReleaseChannel = 'current'
}

def buildArtifactBaseName(Project prj) {
    if (prj == rootProject) {
        return 'meld'
    } else {
        return buildArtifactBaseName(prj.parent) + '-' + ([
            ':services': 'svc'
        ].get(prj.path) ?: prj.name)
    }
}

@SuppressWarnings("unused")
def generatedOutputDir(Project prj, String generator, String srcSet) {
    return prj.file("$prj.buildDir/generated/no-ide/$generator/$srcSet")
}

task nop() {}
