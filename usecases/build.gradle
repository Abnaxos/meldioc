/*
 *  Copyright (c) 2021 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

subprojects {
  if (project.plugins.hasPlugin('java')) {
    ext.publishToMaven = false
    enableImmutables()
    enableMeld()
    tasks.registerJacoco.enabled = false
    dependencies {
      implementation project(':logging')
      runtimeOnly libs.log4j
      runtimeOnly libs.sharedRT_log4jConfig
    }

    task compileBaseJava(type: JavaCompile) {
      def baseDir = file("$buildDir/compileBaseJava")

      dependsOn compileJava

      javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(baseJava.version)
      }
      destinationDirectory = file("$baseDir/classes")
      classpath = compileJava.classpath
      source = compileJava.source
      options.annotationProcessorPath = compileJava.options.annotationProcessorPath
      options.annotationProcessorGeneratedSourcesDirectory = file("$baseDir/generated")
    }
  }
}
