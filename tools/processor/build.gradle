/*
 *  Copyright (c) 2021 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

import org.apache.tools.ant.filters.ReplaceTokens


configurations {
  processorTestsClasspath
  processorTestsProcessorPath
}
configurations.processorTestsProcessorPath.extendsFrom configurations.testImplementation

libs {
  javapoet 'com.squareup:javapoet:1.13.0'
}

dependencies {
  api project(':tools:model')
  api libs.javapoet

  testImplementation libs.tsconfig
  testImplementation group: 'org.ow2.asm', name: 'asm', version: '9.3'
  processorTestsClasspath project(':annotations')
  processorTestsClasspath libs.tsconfig
  processorTestsClasspath libs.vavr
  processorTestsClasspath sourceSets.test.output.classesDirs
}

def processorMetaDir = project.file('src/main/processor')

processResources {
  from processorMetaDir
  filter ReplaceTokens, tokens: [version: project.version]
}

test {
  doFirst {
    doPrepareProcessorTests()
  }
  javaLauncher.set javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(upperJava.version)
  }
  if (upperJava.preview) {
    jvmArgs += '--enable-preview'
  }
}

processTestResources {
  filter(ReplaceTokens, tokens: [version: upperJava.version as String, preview: upperJava.preview as String])
}

task prepareProcessorTests() {
  outputs.upToDateWhen {false}
  doFirst {
    doPrepareProcessorTests()
  }
}

def doPrepareProcessorTests() {
  def processorTestsProperties = file("$buildDir/processor-tests.properties")
  mkdir processorTestsProperties.parent
  Properties props = new Properties()
  props.setProperty('classpath', configurations.processorTestsClasspath.asPath)
  props.setProperty('processor-path', configurations.processorTestsProcessorPath.asPath)
  processorTestsProperties.withOutputStream {props.store(it, "Generated by gradle ${new Date()}")}
}

project('test-cases') {
  apply plugin: 'java'
  apply plugin: 'idea'
  ext.publishToMaven = false

  def processor = parent
  def casesDir = processor.file('src/test-cases')

  buildDir = file("$processor.buildDir/test-cases-target")

  tasks.withType(JavaCompile) {
    options.release.set upperJava.version
    if (upperJava.preview) {
      options.compilerArgs.add '--enable-preview'
    }
  }

  jar {
    enabled false
  }

  dependencies {
    testImplementation project(':annotations')
    testImplementation libs.tsconfig
    testImplementation libs.vavr
    testImplementation processor.sourceSets.test.output.classesDirs
  }
  compileTestJava {
    dependsOn processor.compileTestJava
  }
  idea.module {
    testSourceDirs += casesDir
  }
}
