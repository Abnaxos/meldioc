/*
 *  Copyright (c) 2021 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

apply plugin: 'org.jetbrains.intellij'

ext.publishToMaven = false
tasks.registerJacoco.enabled = false

dependencies {
  implementation project(':tools:model')
}

def ideaSandboxRootDir = file('idea-sandbox')

intellij {
  pluginName = 'ch.raffael.meldioc'
  version = '213.6461.79' // 2021.3.1
  updateSinceUntilBuild = false
  type = 'IC'
  plugins = [
      'java', 'Groovy', 'gradle'
  ]

  sandboxDir = "$ideaSandboxRootDir/idea"
}

def mainIconsDir = file("$buildDir/generated/resources/icons/main")
//noinspection UnnecessaryQualifiedReference
task extractIcons(type: local.ExtractIconsTask) {
  sourceFile = file('src/main/icons/all-icons.svg')
  outputDir = file("$mainIconsDir/ch/raffael/meldioc/idea")

  icons = [
      'feature'                 : ['T Feature'],
      'configuration'           : ['T Configuration'],
      'provision'               : ['M Provision'],
      'mount'                   : ['M Mount 2'],
      'extension-point-acceptor': ['T Extension Point Acceptor'],
      'extension-point'         : ['M Extension Point'],
      'parameter'               : ['M Parameter 2'],
      'setup'                   : ['M Setup']
  ]
}
processResources.dependsOn extractIcons
sourceSets.main.resources.srcDir mainIconsDir

patchPluginXml {

  changeNotes = project.versioning.with {
    """<a href="https://github.com/Abnaxos/meldioc/blob/${
      //noinspection UnnecessaryQualifiedReference
      release ? "release/$project.version" : new local.GitInvoker(project).branchName()
    }/CHANGELOG.md">See CHANGELOG.md on GitHub</a>"""
  }
}

//noinspection GroovyAssignabilityCheck
task syncTestProject(type: Sync, group: 'intellij') {
  destinationDir = file("$ideaSandboxRootDir/test-project")

  includeEmptyDirs = false
  preserve {
    include '**'
  }

  from(rootProject.projectDir) {
    include '*', 'gradle/**', 'buildSrc/**', '.idea/codeStyles/**',
        'library/**/src/**', 'ct-util/**/src/**', 'shared-rt/**/src/**', 'usecases/**/src/**'
    exclude 'settings.gradle', '**/idea-sandbox/**', '.gitignore', 'java.gradle'
  }
  from(rootProject.projectDir) {
    include 'library/**/build.gradle', 'usecases/**/build.gradle',
        'ct-util/**/*.gradle', 'shared-rt/**/build.gradle', 'java.gradle'
    filter {line ->
      if (line =~ /\bproject\s*\(\s*':(annotations|util|logging|tools)/ ) return null
      return line
    }
  }
  into('test-cases/src/main/java') {
    from project(':tools:processor').file('src/test-cases')
    from(project(':tools:processor').file('src/test/groovy')) {
      include '**/Marker.groovy'
    }
  }

  doFirst {
    logger.quiet "IDEA test project directory: $destinationDir"
  }

  doLast {
    file("$ideaSandboxRootDir/test-project/settings.gradle").text =
        """include 'shared-rt:log4j-config',
  'library:base', 'library:codec', 'library:http-undertow', 'ct-util:vagen',
  'usecases:hello-http',
  'test-cases'"""
    def appendStr = new StringWriter()
    //noinspection GroovyAssignabilityCheck
    def append = new PrintWriter(appendStr)
    append.println "ext.enableMeld = { dependencies { "
    [':tools:model', ':tools:processor', ':annotations', ':util'].each {
      append.println "  annotationProcessor files('${project(it).jar.archivePath}')" as String
    }
    append.println '  annotationProcessor libs.vavr'
    //noinspection GroovyAssignabilityCheck
    project(':tools:processor').libs.javapoet[0].with {
      append.println "  annotationProcessor '$it.group:$it.name:$it.version'" as String
    }
    append.println '}}'
    append.println "ext.enableImmutables = { dependencies { "
    append.println '  annotationProcessor libs.immutablesProc'
    append.println "  annotationProcessor files('${project(':util:immutables-proc').jar.archivePath}')" as String
    append.println '  compileOnly libs.immutables'
    append.println '}}'
    append.println """dependencies {"""
    append.println """  implementation libs.vavr"""
    [':annotations', ':util', ':logging'].each {
      append.println """  implementation files('${project(it).jar.archivePath}')""" as String
    }
    append.println '  implementation libs.slf4j'
    append.println '  implementation libs.log4j'
    append.println "  implementation libs.tsconfig"
    append.println """}"""
    append.println "tasks.withType(JavaCompile) {"
    append.println "  options.release.set $upperJava.version" as String
    if (upperJava.preview) {
      append.println "  options.compilerArgs.add '--enable-preview'"
    }
    append.println "}"
    append.close()
    file("$ideaSandboxRootDir/test-project/java.gradle").append("\n\n$appendStr")
    file("$ideaSandboxRootDir/test-project/test-cases/build.gradle").text = """enableMeld()
sourceSets.main.java.exclude '**/*'
"""
  }

}

idea.module {
  excludeDirs += file(ideaSandboxRootDir)
  excludeDirs += file('src/main/icons')
}
